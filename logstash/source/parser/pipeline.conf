input {
  tcp {
    codec => "json_lines"
    port => 9069
    type => "logs"
  }
  heartbeat {
    interval => 20
    type => "heartbeat"
  }
}
filter {
  mutate {
    remove_field => ["@version", "port"]
  }
  if [type] == "logs" {
    if [level] == "DEBUG" {
      if !("" in [logId]) {
        grok {
          add_field => {
            logId => "spoolerJobDataSaved"
          }
          
          match => {
            message => "^Saving data file to job store finished successfully, jobId=\[%{UUID:JobGuid}]"
          }
          
        }
        if !("" in [logId]) {
          grok {
            add_field => {
              logId => "spoolerJobAnalysisEnd"
            }
            
            match => {
              message => "^Job analysis complete, jobId=\[%{UUID:JobGuid}]"
            }
            
          }
          if !("" in [logId]) {
            grok {
              add_field => {
                logId => "spoolerDeletingDocument"
              }
              
              match => {
                message => "Deleting document \[%{UUID}\.job]"
              }
              
            }
            if !("" in [logId]) {
              grok {
                add_field => {
                  logId => "terminalServerSending"
                }
                
                match => {
                  message => "^Sending: .*PrintService.printAll.*\"userName\":\"%{WORD:userName}\".*"
                }
                
              }
              if !("" in [logId]) {
                grok {
                  add_field => {
                    logId => "spocLoadingJobTickets"
                  }
                  
                  match => {
                    message => "^Loading job tickets for .* %{WORD:userName}"
                  }
                  
                }
                if !("" in [logId]) {
                  grok {
                    add_field => {
                      logId => "spocSendingPrintRequest"
                    }
                    
                    match => {
                      message => "^Sending print request %{NOTSPACE:requestId}"
                    }
                    
                  }
                }
              }
            }
          }
        }
      }
    } else if [level] == "INFO" {
      if !("" in [logId]) {
        grok {
          add_field => {
            logId => "spoolerJobReceiveStart"
          }
          
          match => {
            message => "^Receive job command obtained, jobId=\[%{UUID:JobGuid}],"
          }
          
        }
        if !("" in [logId]) {
          grok {
            add_field => {
              logId => "spoolerJobProcessStart"
            }
            
            match => {
              message => "^Processing of job \[%{UUID:JobGuid}]\.$"
            }
            
          }
          if !("" in [logId]) {
            grok {
              add_field => {
                logId => "spoolerParserStart"
              }
              
              match => {
                message => "^ParserProcess started with arguments \[%{UUID:JobGuid},"
              }
              
            }
            if !("" in [logId]) {
              grok {
                add_field => {
                  logId => "spoolerParserEnd"
                }
                
                match => {
                  message => "^ParserProcess finished with exit code"
                }
                
              }
              if !("" in [logId]) {
                grok {
                  add_field => {
                    logId => "spoolerJobTicketSent"
                  }
                  
                  match => {
                    message => "^Sending job ticket \["
                  }
                  
                }
                if !("" in [logId]) {
                  grok {
                    add_field => {
                      logId => "spoolerJobTicketAccepted"
                    }
                    
                    match => {
                      message => "^Job ticket for job \[%{UUID:JobGuid}] has been accepted by controller\.$"
                    }
                    
                  }
                  if !("" in [logId]) {
                    grok {
                      add_field => {
                        logId => "spoolerJobProcessEnd"
                      }
                      
                      match => {
                        message => "^Processing of job successfully finished, jobId=\[%{UUID:JobGuid}]"
                      }
                      
                    }
                    if !("" in [logId]) {
                      grok {
                        add_field => {
                          logId => "spoolerPrintRequestReceived"
                        }
                        
                        match => {
                          message => "^Print request \[RequestId=\[%{PROG}] PrintJob=\[JobId=\[%{INT:JobId}], JobGuid=\[%{UUID:JobGuid}"
                        }
                        
                      }
                      if !("" in [logId]) {
                        grok {
                          add_field => {
                            logId => "spoolerPrintJob"
                          }
                          
                          match => {
                            message => "^Print jobId \[RequestId=\[%{PROG}] PrintJob=\[JobId=\[%{INT:JobId}], JobGuid=\[%{UUID:JobGuid}.*User=\[UserName=\[%{USERNAME:UserName}]"
                          }
                          
                        }
                        if !("" in [logId]) {
                          grok {
                            add_field => {
                              logId => "spoolerJobPrintStart"
                            }
                            
                            match => {
                              message => "\APrinting of job started, jobId=\[%{UUID:JobGuid}"
                            }
                            
                          }
                          if !("" in [logId]) {
                            grok {
                              add_field => {
                                logId => "spoolerJobPrintEnd"
                              }
                              
                              match => {
                                message => "^Job was printed completely, jobId=\[%{UUID:JobGuid}],"
                              }
                              
                            }
                            if !("" in [logId]) {
                              grok {
                                add_field => {
                                  logId => "spoolerJobPrintError"
                                }
                                
                                match => {
                                  message => "^Sending print status \[JobGuid=\[%{UUID:JobGuid}\], ResultCode=\[PrinterNotAvailable\], ResultData=\[Printer was not initiated correctly."
                                }
                                
                              }
                              if !("" in [logId]) {
                                grok {
                                  add_field => {
                                    logId => "terminalLoginStart"
                                  }
                                  
                                  match => {
                                    message => "\[(?<DeviceIp>[^\]]*)]\[[0-9]+] InitAuthenticationSession called"
                                  }
                                  
                                }
                                if !("" in [logId]) {
                                  grok {
                                    add_field => {
                                      logId => "terminalLoginEnd"
                                    }
                                    
                                    match => {
                                      message => "^\[(?<DeviceIp>[^\]]*)]\[[0-9]+] Authentication or card registration process Finished"
                                    }
                                    
                                  }
                                  if !("" in [logId]) {
                                    grok {
                                      add_field => {
                                        logId => "terminalServerUserSessionStart"
                                      }
                                      
                                      match => {
                                        message => "^\[(?<DeviceIp>[^\]]*)].*Session \[[0-9]+] started. User: \[%{USERNAME:UserName}]"
                                      }
                                      
                                    }
                                    if !("" in [logId]) {
                                      grok {
                                        add_field => {
                                          logId => "printerJobPrinted"
                                        }
                                        
                                        match => {
                                          message => "^JobHeader \["
                                        }
                                        
                                      }
                                      if !("" in [logId]) {
                                        grok {
                                          add_field => {
                                            logId => "spoolerConnectionLost"
                                          }
                                          
                                          match => {
                                            message => "^Connection to server at \[%{URI}] lost\."
                                          }
                                          
                                        }
                                        if !("" in [logId]) {
                                          grok {
                                            add_field => {
                                              logId => "spoolerConnectionRestored"
                                            }
                                            
                                            match => {
                                              message => "^Connection to server restored at"
                                            }
                                            
                                          }
                                          if !("" in [logId]) {
                                            grok {
                                              add_field => {
                                                logId => "spoolerCouldNotExecuteRequest"
                                              }
                                              
                                              match => {
                                                message => "Could not execute request for"
                                              }
                                              
                                            }
                                            if !("" in [logId]) {
                                              grok {
                                                add_field => {
                                                  logId => "spocJobReceived"
                                                }
                                                
                                                match => {
                                                  message => "^Job with jobGuid = '%{UUID}' received with result = true and receptionInfoMessage = JOB_RECEPTION_SUCCESSFUL"
                                                }
                                                
                                              }
                                              if !("" in [logId]) {
                                                grok {
                                                  add_field => {
                                                    logId => "spocJobIsPrintingFinished"
                                                  }
                                                  
                                                  match => {
                                                    message => "^jobIsPrinting finished"
                                                  }
                                                  
                                                }
                                                if !("" in [logId]) {
                                                  grok {
                                                    add_field => {
                                                      logId => "spocJobWasPrintedFinished"
                                                    }
                                                    
                                                    match => {
                                                      message => "^jobWasPrinted finished"
                                                    }
                                                    
                                                  }
                                                  if !("" in [logId]) {
                                                    grok {
                                                      add_field => {
                                                        logId => "spocRequestToPrintJob"
                                                      }
                                                      
                                                      match => {
                                                        message => "^Request to print job"
                                                      }
                                                      
                                                    }
                                                    if !("" in [logId]) {
                                                      grok {
                                                        add_field => {
                                                          logId => "lprJobSenderStart"
                                                        }
                                                        
                                                        match => {
                                                          message => "^Sending job '"
                                                        }
                                                        
                                                      }
                                                      if !("" in [logId]) {
                                                        grok {
                                                          add_field => {
                                                            logId => "lprJobSenderEnd"
                                                          }
                                                          
                                                          match => {
                                                            message => "^Job successfully sent"
                                                          }
                                                          
                                                        }
                                                        if !("" in [logId]) {
                                                          grok {
                                                            add_field => {
                                                              logId => "attemptingToPrint"
                                                            }
                                                            
                                                            match => {
                                                              message => "^Attempting to print jobId=%{INT:JobId}"
                                                            }
                                                            
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else if [level] == "ERROR" {
      if !("" in [logId]) {
        grok {
          add_field => {
            logId => "spoolerCannotConnectPrinter"
          }
          
          match => {
            message => "^Unable to connect to printer "
          }
          
        }
        if !("" in [logId]) {
          grok {
            add_field => {
              logId => "printerJobPrintedNetworkError"
            }
            
            match => {
              message => "^Error reading data from socket, external network failure"
            }
            
          }
          if !("" in [logId]) {
            grok {
              add_field => {
                logId => "spocConnectionTimeout"
              }
              
              match => {
                message => "^Connection timeout."
              }
              
            }
          }
        }
      }
    }
    if !("" in [logId]) {
      mutate {
        add_field => {
          logId => "default"
        }
        
      }
    }
    mutate {
      remove_tag => ["_grokparsefailure"]
    }
    aggregate {
      code => '
                      map["count"] ||= 0
                      map["time"] ||= event.get("@timestamp")
                      map["count"] += 1
                      map["level"] ||= event.get("level")
      map["host"] ||= event.get("host")
      map["group"] ||= event.get("group")
      map["logId"] ||= event.get("logId")
      map["component"] ||= event.get("component")
                  '
      timeout => 10
      task_id => "%{[level]}-%{[host]}-%{[group]}-%{[logId]}-%{[component]}-%{+YYYY.MM.dd.hh.mm}"
      timeout_code => '
                  event.set("[@metadata][output]", "influx")
                  event.set("[@metadata][topic]", "metrics")
                  event.set("[type]", "metrics")
                  event.set("message", "logs_count,level=" + if event.get("level") then event.get("level") else "default" end + ",host=" + if event.get("host") then event.get("host") else "default" end + ",group=" + if event.get("group") then event.get("group") else "default" end + ",logId=" + if event.get("logId") then event.get("logId") else "default" end + ",component=" + if event.get("component") then event.get("component") else "default" end + " count=" + event.get("count").to_s + " " + Time.at(event.get("time").to_i).strftime("%s") + rand(1000000000).to_s.rjust(9, "0"))
              '
      push_map_as_event_on_timeout => true
    }
  }
  if [type] == "logs" {
    if [logId] in ["spoolerPrintJob", "terminalLoginEnd", "terminalLoginStart", "terminalServerSending", "spoolerJobProcessStart", "spocSendingPrintRequest", "spocLoadingJobTickets", "spoolerPrintRequestReceived", "spoolerJobProcessEnd", "terminalServerUserSessionStart"] {
      if [logId] == "spoolerJobProcessStart" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "spoolerJobProcessElapsed"
              algorithm => "elapsed"
              uniqueId => "%{JobGuid}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spoolerJobProcessEnd" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "spoolerJobProcessElapsed"
              algorithm => "elapsed"
              uniqueId => "%{JobGuid}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "terminalServerSending" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "M3.1"
              algorithm => "elapsed"
              uniqueId => "%{userName}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spocLoadingJobTickets" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "M3.1"
              algorithm => "elapsed"
              uniqueId => "%{userName}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spocLoadingJobTickets" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "M3.2"
              algorithm => "elapsed"
              uniqueId => "%{thread}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spocSendingPrintRequest" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "M3.2"
              algorithm => "elapsed"
              uniqueId => "%{thread}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spocSendingPrintRequest" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "M3.3"
              algorithm => "elapsed"
              uniqueId => "%{requestId}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spoolerPrintRequestReceived" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "M3.3"
              algorithm => "elapsed"
              uniqueId => "%{requestId}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "terminalServerUserSessionStart" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "printDuration"
              algorithm => "elapsed"
              uniqueId => "%{UserName}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "spoolerPrintJob" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "printDuration"
              algorithm => "elapsed"
              uniqueId => "%{UserName}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "terminalLoginStart" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "start"
              elapsedId => "terminalLoginDuration"
              algorithm => "elapsed"
              uniqueId => "%{DeviceIp}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
      if [logId] == "terminalLoginEnd" {
        clone {
          clones => ["correlation_data"]
        }
        if [type] == "correlation_data" {
          mutate {
            replace => {
              "[@metadata][topic]" => "correlation_data"
              position => "end"
              elapsedId => "terminalLoginDuration"
              algorithm => "elapsed"
              uniqueId => "%{DeviceIp}"
            }
            
          }
          prune {
            whitelist_names => ["@timestamp", "type", "algorithm", "position", "elapsedId", "uniqueId", "host", "group"]
          }
        }
      }
    }
  }
  if [type] == "logs" and [loggerName] == "TerminalServer.Logging.Modules.OwinLogger" {
    grok {
      match => {
        message => ["^[^|]*\| *200 \| *POST \|[^|]*\|[^|]*\| */et/v1/%{INT}/%{WORD:name} \|[^|]*\| *%{INT:duration}%{GREEDYDATA}$"]
      }
      
    }
    if "_grokparsefailure" not in [tags] {
      clone {
        clones => ["metrics"]
      }
      if [type] == "metrics" {
        ruby {
          code => '
                              event.set("duration", (event.get("duration").to_i*1000000).to_s)
                              event.set("end_time", (event.get("@timestamp").to_f*1000000000).to_i.to_s)
                              event.set("start_time", (event.get("end_time").to_i - event.get("duration").to_i).to_s)
                              event.set("status", "ok")
                              event.set("elapsedId", if event.get("name") == "jobs" then "M2" else "M1" end)
                              event.set("[@metadata][topic]", "metrics")
                              event.set("message", "elapsed,elapsedId=" + event.get("elapsedId") + ",status=" + event.get("status") + ",host=" + event.get("host") + ",group=" + event.get("group") + " duration=" + (event.get("end_time").to_i - event.get("start_time").to_i).to_s + " " + event.get("start_time"))
                              '
        }
      }
    }
  }
  if [type] in ["correlation_data", "heartbeat"] {
    ruby {
      init => "@events = Array.new"
      code => '
                        event.set("current_time", Time.now.to_f)
                        if event.get("type") != "heartbeat"
                          @events.push(event.clone)
                        else
                          @events.sort! { |eventA, eventB| eventB.get("@timestamp").to_f <=> eventA.get("@timestamp").to_f }
      
                          current_time = Time.now.to_f
      
                          while not @events.empty? and current_time - @events.last.get("current_time") > 60
                            new_event_block.call(@events.pop)
                          end
                        end
                        event.cancel
                  '
    }
    mutate {
      remove_field => ["current_time"]
    }
    if [algorithm] == "elapsed" {
      if [position] == "start" {
        aggregate {
          map_action => "create"
          code => '
                                  map["start_time"] = (event.get("@timestamp").to_f*1000000000).to_i.to_s
                                  map["elapsedId"] = event.get("elapsedId")
                                  map["uniqueId"] = event.get("uniqueId")
                                  map["host"] = event.get("host")
                                  map["group"] = event.get("group")
                              '
          task_id => "%{elapsedId}-%{uniqueId}"
        }
      } else {
        aggregate {
          code => '
                                  event.set("start_time", map["start_time"])
                                  event.set("host", map["host"])
                                  event.set("end_time", (event.get("@timestamp").to_f*1000000000).to_i.to_s)
                                  event.set("type", "metrics")
                                  event.set("status", "ok")
                              '
          push_map_as_event_on_timeout => true
          task_id => "%{elapsedId}-%{uniqueId}"
          map_action => "update"
          end_of_task => true
          timeout => 1800
          timeout_code => '
                                  event.set("status", "expired")
                                  event.set("type", "metrics")
                              '
        }
      }
      if [type] == "metrics" {
        mutate {
          replace => {
            uniqueId => '"%{uniqueId}"'
                
          }
          
        }
        if [status] == "ok" {
          ruby {
            code => '
                                    event.set("message", "elapsed,elapsedId=" + event.get("elapsedId") + ",status=" + event.get("status") + ",host=" + event.get("host") + ",group=" + event.get("group") + " duration=" + (event.get("end_time").to_i - event.get("start_time").to_i).to_s + ",uniqueId=" + event.get("uniqueId") + " " + event.get("start_time"))
                                    '
          }
        } else {
          ruby {
            code => '
                                    event.set("message", "elapsed,elapsedId=" + event.get("elapsedId") + ",status=" + event.get("status") + ",host=" + event.get("host") + ",group=" + event.get("group") + " uniqueId=" + event.get("uniqueId") + " " + event.get("start_time"))
                                    '
          }
        }
      }
    }
  }
  if [type] == "metrics" {
    mutate {
      replace => {
        "[@metadata][delete]" => "ano"
      }
      
    }
    aggregate {
      code => '
                      map["message"] ||= ""
                      map["group"] ||= event.get("group")
                      map["message"] += event.get("message") + "\n"
                  '
      timeout => 1
      task_id => "%{[type]}-%{[group]}"
      timeout_code => '
                      event.set("[@metadata][output]", "influx")
                      event.set("[type]", "metrics")
                      event.set("[@metadata][delete]", "ne")
                  '
      push_map_as_event_on_timeout => true
    }
    if [@metadata][delete] == "ano" {
      drop {
        id => "drop_filter"
      }
    }
  }
}
output {
  if [type] == "logs" {
    tcp {
      host => "localhost"
      codec => "json_lines"
      port => 9070
    }
  }
}

