input {
  tcp {
    add_field => {
      "[@metadata][output]" => "processing"
      "[@metadata][source]" => "log4j2"
      "[@metadata][topic]" => "unified_logs"
    }
    
    codec => "json_lines"
    type => "logs"
    port => 9555
  }
  tcp {
    add_field => {
      "[@metadata][output]" => "processing"
      "[@metadata][source]" => "nlog"
      "[@metadata][topic]" => "unified_logs"
    }
    
    codec => "json_lines"
    type => "logs"
    port => 9556
  }
  tcp {
    add_field => {
      "[@metadata][output]" => "processing"
      "[@metadata][source]" => "telegraf"
      "[@metadata][topic]" => "metrics"
    }
    
    codec => line {
      format => "%{message}"
    }
    
    type => "metrics"
    port => 9557
  }
  beats {
    add_field => {
      "[@metadata][source]" => "beats"
    }
    
    port => 9558
  }
  tcp {
    add_field => {
      "[@metadata][output]" => "processing"
      "[@metadata][source]" => "serilog"
      "[@metadata][topic]" => "unified_logs"
    }
    
    codec => "json_lines"
    type => "logs"
    port => 9559
  }
}
filter {
  if [@metadata][source] == "beats" {
    if [source] =~ "spooler" {
      grok {
        match => {
          message => "\A%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} *%{INT:threadId} *\| %{UUID:activityId} \| %{NOTSPACE} *\| %{GREEDYDATA:message}"
        }
        
        overwrite => ["message"]
      }
      mutate {
        replace => {
          "[@metadata][output]" => "processing"
          type => "logs"
          "[@metadata][source]" => "nlog"
          "[@metadata][topic]" => "unified_logs"
        }
        
      }
      if [time] =~ "\d{4}$" {
        mutate {
          gsub => ["time", "\d$", ""]
        }
      }
    } else if [source] =~ "telegraf" {
      mutate {
        replace => {
          "[@metadata][output]" => "processing"
          type => "metrics"
          "[@metadata][source]" => "telegraf"
          "[@metadata][topic]" => "metrics"
        }
        
      }
    }
    mutate {
      remove_field => ["offset", "beat", "input_type", "source", "tags"]
    }
  }
  if [@metadata][source] == "nlog" {
    date {
      remove_field => ["time"]
      match => ["time", "ISO8601"]
    }
  } else if [@metadata][source] == "log4j2" {
    date {
      remove_field => ["timeMillis"]
      match => ["timeMillis", "UNIX_MS"]
    }
  } else if [@metadata][source] == "serilog" {
    date {
      remove_field => ["timestamp"]
      match => ["timestamp", "ISO8601"]
    }
    ruby {
      code => '
                              event.set("level", case event.get("level") when "Verbose" then "TRACE" when "Debug" then "DEBUG" when "Information" then "INFO" when "Warning" then "WARN" when "Error" then "ERROR" when "Fatal" then "FATAL" end)
                              logId = event.get("logId")
                              if logId and logId.length > 0 then event.set("logId", logId[0, 1].downcase + logId[1..-1]) end
                          '
    }
  }
  if [level] == "DEBUG" {
    drop {
      percentage => 100
    }
  }
  if [level] == "TRACE" {
    drop {
      percentage => 100
    }
  }
  if [@metadata][topic] == "unified_logs" {
    if "" in [message] {
      ruby {
        code => '
                                event.set("message", event.get("message")[0...32000])
                            '
      }
    }
  }
  if [@metadata][beat] != "filebeat" {
    ruby {
      init => "require 'socket'"
      code => "event.set('host', Socket.gethostname)"
    }
  }
  mutate {
    add_field => {
      group => "default"
    }
    
    remove_field => ["@version", "port", "loggerFqcn", "endOfBatch", "threadPriority"]
  }
  if !("" in [component]) {
    mutate {
      add_field => {
        component => "default"
      }
      
    }
  }
  metrics {
    add_field => {
      "[@metadata][output]" => "file"
    }
    
    meter => ["all", "%{[@metadata][source]}"]
  }
}
output {
  if [@metadata][output] == "file" {
    file {
      path => "./metrics.json"
      codec => "json_lines"
    }
  } else if [@metadata][output] == "processing" {
    tcp {
      host => "10.0.11.162"
      codec => "json_lines"
      port => 9070
    }
  }
}
